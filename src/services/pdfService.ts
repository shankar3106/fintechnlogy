import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { InvestmentProfile, InvestmentRecommendation } from '../types';

export const generatePDFReport = async (
  profile: InvestmentProfile,
  recommendation: InvestmentRecommendation,
  exchangeRate: number
) => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;

  // Header
  pdf.setFontSize(24);
  pdf.setTextColor(59, 130, 246); // Blue color
  pdf.text('InvestAI Pro - Investment Report', pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 15;
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on: ${new Date().toLocaleDateString('en-IN')}`, pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 20;

  // Investment Summary
  pdf.setFontSize(16);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Investment Summary', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(11);
  const summaryData = [
    `Initial Investment: ₹${(profile.capitalAmount * exchangeRate).toLocaleString('en-IN')}`,
    `Investment Period: ${profile.investmentPeriod} years`,
    `Target Amount: ₹${(profile.targetGrowth * exchangeRate).toLocaleString('en-IN')}`,
    `Risk Tolerance: ${profile.riskTolerance.charAt(0).toUpperCase() + profile.riskTolerance.slice(1)}`,
    `Expected Annual Return: ${(((profile.targetGrowth - profile.capitalAmount) / profile.capitalAmount * 100) / profile.investmentPeriod).toFixed(1)}%`,
  ];

  summaryData.forEach((item, index) => {
    pdf.text(item, 25, yPosition + (index * 7));
  });

  yPosition += summaryData.length * 7 + 15;

  // Asset Allocation
  pdf.setFontSize(16);
  pdf.text('Asset Allocation', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(11);
  recommendation.assetAllocation.forEach((asset, index) => {
    const amount = asset.amount * exchangeRate;
    pdf.text(`${asset.name}: ${asset.percentage}% (₹${amount.toLocaleString('en-IN')})`, 25, yPosition + (index * 7));
  });

  yPosition += recommendation.assetAllocation.length * 7 + 15;

  // Check if we need a new page
  if (yPosition > pageHeight - 50) {
    pdf.addPage();
    yPosition = 20;
  }

  // Specific Recommendations
  pdf.setFontSize(16);
  pdf.text('Specific Recommendations', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(10);
  recommendation.specificRecommendations.forEach((rec, index) => {
    if (yPosition > pageHeight - 30) {
      pdf.addPage();
      yPosition = 20;
    }
    
    pdf.setFont(undefined, 'bold');
    pdf.text(`${rec.symbol} - ${rec.name}`, 25, yPosition);
    yPosition += 5;
    
    pdf.setFont(undefined, 'normal');
    pdf.text(`Sector: ${rec.sector} | Allocation: ${rec.allocation}%`, 25, yPosition);
    yPosition += 5;
    
    // Split long rationale text
    const splitRationale = pdf.splitTextToSize(rec.rationale, pageWidth - 50);
    pdf.text(splitRationale, 25, yPosition);
    yPosition += splitRationale.length * 4 + 8;
  });

  // Investment Strategy
  if (yPosition > pageHeight - 40) {
    pdf.addPage();
    yPosition = 20;
  }

  pdf.setFontSize(16);
  pdf.text('Investment Strategy', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(11);
  pdf.setFont(undefined, 'bold');
  pdf.text(recommendation.strategy.type === 'lump_sum' ? 'Lump Sum Investment' : 'Systematic Investment Plan (SIP)', 25, yPosition);
  yPosition += 8;

  pdf.setFont(undefined, 'normal');
  const strategyText = pdf.splitTextToSize(recommendation.strategy.rationale, pageWidth - 50);
  pdf.text(strategyText, 25, yPosition);
  yPosition += strategyText.length * 5 + 10;

  if (recommendation.strategy.monthlyAmount) {
    pdf.text(`Monthly Investment: ₹${(recommendation.strategy.monthlyAmount * exchangeRate).toLocaleString('en-IN')}`, 25, yPosition);
    yPosition += 10;
  }

  // Process Guide
  if (yPosition > pageHeight - 60) {
    pdf.addPage();
    yPosition = 20;
  }

  pdf.setFontSize(16);
  pdf.text('Step-by-Step Investment Guide', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(10);
  recommendation.processGuide.forEach((step, index) => {
    if (yPosition > pageHeight - 20) {
      pdf.addPage();
      yPosition = 20;
    }
    
    const stepText = pdf.splitTextToSize(step, pageWidth - 50);
    pdf.text(stepText, 25, yPosition);
    yPosition += stepText.length * 4 + 5;
  });

  // Footer
  const totalPages = pdf.internal.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(8);
    pdf.setTextColor(150, 150, 150);
    pdf.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
    pdf.text('Generated by InvestAI Pro - For educational purposes only', pageWidth / 2, pageHeight - 5, { align: 'center' });
  }

  // Save the PDF
  pdf.save(`InvestAI-Pro-Report-${new Date().toISOString().split('T')[0]}.pdf`);
};